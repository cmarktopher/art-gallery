// Used this tutorial as a starting point to learn how to use passport with google based OAuth: https://www.youtube.com/watch?v=sakQbeRjgwg&list=PL4cUxeGkcC9jdm7QX143aMLAqyM-jTZ2x

const keys = require('../config/googleOAuthConnection.json')
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20');

const passportAuthenticator = (container) => {

    const userDataAccessObject = container.resolve('userDataAccessObject');

    passport.serializeUser((id, done) => {

        // We will store an id in the cookie.
        done(null, id);
    });
    
    passport.deserializeUser(async (id, done) => {
    
        // Get the user via the id
        var currentUser = await userDataAccessObject.getUserById(id);

        done(null, currentUser);
    });
    
    // This will be where we setup the google strategy, along with our redirect that needs to match what was entered in google.
    // We also have a callback that will call once we exchange our token for a user's profile which we can use to find a user or create a new user by using the google profile Id that we get back.
    passport.use(
        
        new GoogleStrategy({
    
            callbackURL: '/authentication/google/redirect',
            clientID: keys.web.client_id, 
            clientSecret: keys.web.client_secret
    
        }, async (accessToken, refreshToken, profile, done) => {

            // What we can do now, is get the google profile ID, and attempt to find a user with that google id.
            var currentUser = await userDataAccessObject.getUserByGoogleId(profile.id);

            // If we don't get back anything, that means the user does not exist, so lets add them to our database via the data access object
            // Since we are using google here, we can directly add a user through this callback instead of going through the add user route (I will need to have a proper think about the best place to put this particulur logic though).
            // Note here that we are adding in the profile id that we get back from google to the google id field - this will be important for the above code when we search for a user.
            if (currentUser == null){

                currentUser = await userDataAccessObject.addNewUser(
                    
                    {
                        firstName: profile.name.givenName || 'Not Provided',
                        lastName: profile.name.familyName || 'Not Provided',
                        userName: (profile.emails && profile.emails[0].value) || 'Not Provided',
                        password: "Not Applicable",
                        googleId: profile.id,
                        role: 'User'
                    }
                )
            }

            // From my understanding based on the tutorial series I watched and from reading online, this will call serializeUser automatically, which we can pass in an id of our choice (will use the user id generated by mongo db)
            // All of this will basically lead to a creation of a cookie with that id (will be encrypted based on a secret that we provide when initializng express session) to send back to the user.
            done(null, currentUser.id);
        })
    )
};


module.exports = passportAuthenticator;