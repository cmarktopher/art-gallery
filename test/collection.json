{
	"info": {
		"_postman_id": "b7539c33-10af-4571-810b-cb006ad7adf3",
		"name": "SIT331-T1-2023-Task-5.1-Art-Gallery-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25068676"
	},
	"item": [
		{
			"name": "Art Gallery Testing (Local Authentication)",
			"item": [
				{
					"name": "All Endpoints Unauthenticated",
					"item": [
						{
							"name": "/artists (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artists",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artists"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artist/{id} (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artists/{{new-artist-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artists",
										"{{new-artist-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artists/name_search (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artists/search/name_search?firstName={{new-artist-first-name-1}}&lastName={{new-artist-last-name-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artists",
										"search",
										"name_search"
									],
									"query": [
										{
											"key": "firstName",
											"value": "{{new-artist-first-name-1}}"
										},
										{
											"key": "lastName",
											"value": "{{new-artist-last-name-1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/artists (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{new-artist-first-name-1}}\",\r\n    \"lastName\": \"{{new-artist-last-name-1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artists",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artists"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artists/{id} (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{new-artist-first-name-2\",\r\n    \"lastName\": \"{{new-artist-last-name-2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artists/{{current-artist-id}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artists",
										"{{current-artist-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artists/{id} (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artists/{{new-artist-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artists",
										"{{new-artist-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artworks (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artworks",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artworks"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artworks/{id} (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artworks/{{new-artwork-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artworks",
										"{{new-artwork-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artworks/image/{id} (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artworks/image/{{new-artwork-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artworks",
										"image",
										"{{new-artwork-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artworks  (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/D:/Courses/Computer Science/2023/Trimester 1/SIT 331 - Secure Backend Services/Tasks/Task 5.1 - HD/mern-art-gallery-backend/tests/simple_image.png"
										},
										{
											"key": "name",
											"value": "{{new-artwork-name}}",
											"type": "text"
										},
										{
											"key": "artistID",
											"value": "{{new-artist-id-1}}",
											"type": "text"
										},
										{
											"key": "description",
											"value": "{{new-artwork-description}}",
											"type": "text"
										},
										{
											"key": "",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artworks",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artworks"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artworks/{id}  (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "simple_image.png"
										},
										{
											"key": "name",
											"value": "Artwork_2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artworks/image/{{new-artwork-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artworks",
										"image",
										"{{new-artwork-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artworks/{id}  (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artworks/{{new-artwork-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artworks",
										"{{new-artwork-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/users",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users/{id} (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/users/{{new-user-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"users",
										"{{new-user-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users/{userName}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/users/username/{{secondary_user_username}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"users",
										"username",
										"{{secondary_user_username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{secondary_user_first_name}}\",\r\n    \"lastName\": \"{{secondary_user_last_name}}\",\r\n    \"userName\": \"{{secondary_user_username}}\",\r\n    \"password\": \"{{secondary_user_password}}\",\r\n    \"role\": \"{{secondary_admin_role}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:{{port}}/users",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users{id} (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{secondary_user_first_name}}\",\r\n    \"lastName\": \"{{secondary_user_last_name}}\",\r\n    \"userName\": \"{{secondary_user_username}}\",\r\n    \"password\": \"{{secondary_user_password}}\",\r\n    \"role\": \"{{secondary_regular_role}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:{{port}}/users/{{new-user-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"users",
										"{{new-user-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users/{id} (unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the correct error message.\", function() {\r",
											"\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('error');\r",
											"    pm.expect(response.error).to.eql(pm.variables.get('unauthenticated-error-message'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/users/{{new-user-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"users",
										"{{new-user-id-1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Local Authenticate User",
					"item": [
						{
							"name": "/authentication/local (Wrong Username))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{incorrect_admin_username}}\",\r\n    \"password\": \"{{primary_admin_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:{{port}}/authentication/local",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"authentication",
										"local"
									]
								}
							},
							"response": []
						},
						{
							"name": "/authentication/local (Wrong Password))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Unauthorized\", function() {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{primary_admin_username}}\",\r\n    \"password\": \"{{incorrect_admin_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:{{port}}/authentication/local",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"authentication",
										"local"
									]
								}
							},
							"response": []
						},
						{
							"name": "/authentication/local Log in as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Ok\", function() {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{primary_admin_username}}\",\r\n    \"password\": \"{{primary_admin_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:{{port}}/authentication/local",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"authentication",
										"local"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Users Authenticated",
					"item": [
						{
							"name": "/users - Create new admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201){\r",
											"    \r",
											"    var user = pm.response.json();\r",
											"    pm.environment.set(\"new-user-id-1\", user._id);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Status code is Created\", function (){\r",
											"    \r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"pm.test(\"Response body is not empty\", function(){\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"Response body contains a user object in JSON notation\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"// As per some rules I decided on, if we have an account using local sign up, we cannot have the oauth ids.\r",
											"pm.test(\"Response body contains a new user with the correct properties\", function(){\r",
											"\r",
											"    var user = pm.response.json();\r",
											"\r",
											"    pm.expect(user).to.have.property('_id').that.is.not.null;\r",
											"    pm.expect(user).to.have.property('firstName').that.is.not.null;\r",
											"    pm.expect(user).to.have.property('lastName').that.is.not.null;\r",
											"    pm.expect(user).to.have.property('userName').that.is.not.null;\r",
											"    pm.expect(user).to.have.property('password').that.is.not.null;\r",
											"    pm.expect(user).to.not.have.property('googleID');\r",
											"    pm.expect(user).to.have.property('role').that.is.not.null;\r",
											"})\r",
											"\r",
											"pm.test(\"Test newly created user's firt name\", function() {\r",
											"    \r",
											"    var user = pm.response.json();\r",
											"\r",
											"    pm.expect(user.firstName).to.equal(pm.variables.get('secondary_user_first_name'));\r",
											"})\r",
											"\r",
											"pm.test(\"Test newly created user's last name\", function() {\r",
											"    \r",
											"    var user = pm.response.json();\r",
											"\r",
											"    pm.expect(user.lastName).to.equal(pm.variables.get('secondary_user_last_name'));\r",
											"})\r",
											"\r",
											"pm.test(\"Test newly created user's username\", function() {\r",
											"    \r",
											"    var user = pm.response.json();\r",
											"\r",
											"    pm.expect(user.userName).to.equal(pm.variables.get('secondary_user_username'));\r",
											"})\r",
											"\r",
											"pm.test(\"Test newly created user's role\", function() {\r",
											"    \r",
											"    var user = pm.response.json();\r",
											"\r",
											"    pm.expect(user.role).to.equal(pm.variables.get('secondary_admin_role'));\r",
											"})\r",
											"\r",
											"pm.test(\"Is password hashed\", function() {\r",
											"    \r",
											"    var user = pm.response.json();\r",
											"\r",
											"    pm.expect(user.password).to.not.equal(pm.variables.get('secondary_user_password'));\r",
											"})\r",
											"\r",
											"pm.test(\"Check if newly created resource URL to be in the location HTTP header\", function(){\r",
											"\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"\r",
											"    var user = pm.response.json();\r",
											"\r",
											"    // What we get back will be a relative url and as such, can either compare the relative url or construct both to have the full urls\r",
											"    var locationUrl = 'http://' + pm.variables.get('api-host') + \":\" +  pm.variables.get('port') + pm.response.headers.get('Location')\r",
											"    var newResourceUrl = 'http://' + pm.variables.get('api-host') + \":\" +  pm.variables.get('port') + '/users/' + user._id;\r",
											"\r",
											"    pm.expect(locationUrl).to.eql(newResourceUrl);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{secondary_user_first_name}}\",\r\n    \"lastName\": \"{{secondary_user_last_name}}\",\r\n    \"userName\": \"{{secondary_user_username}}\",\r\n    \"password\": \"{{secondary_user_password}}\",\r\n    \"role\": \"{{secondary_admin_role}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:{{port}}/users",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users - Try adding same user again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is Bad Request\", function (){\r",
											"    \r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Response body is not empty\", function(){\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"Response body contains a user object in JSON notation\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{secondary_user_first_name}}\",\r\n    \"lastName\": \"{{secondary_user_last_name}}\",\r\n    \"userName\": \"{{secondary_user_username}}\",\r\n    \"password\": \"{{secondary_user_password}}\",\r\n    \"role\": \"{{secondary_admin_role}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:{{port}}/users",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users - Get all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function() {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains an array of users\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Each user in the users array contains valid properties\", function() {\r",
											"    \r",
											"    var users = pm.response.json();\r",
											"\r",
											"    for (const user of users){\r",
											"        pm.expect(user).to.have.property('_id').that.is.not.null;\r",
											"        pm.expect(user).to.have.property('firstName').that.is.not.null;\r",
											"        pm.expect(user).to.have.property('lastName').that.is.not.null;\r",
											"        pm.expect(user).to.have.property('userName').that.is.not.null;\r",
											"        pm.expect(user).to.have.property('password').that.is.not.null;\r",
											"        pm.expect(user).to.not.have.property('googleID');\r",
											"        pm.expect(user).to.have.property('role').that.is.not.null;\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api-host}}:3000/users",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users{id} - Change new admin user to regular user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is No Content\", function (){\r",
											"    \r",
											"    pm.response.to.have.status(204);\r",
											"})\r",
											"\r",
											"pm.test(\"Response body is empty\", function(){\r",
											"\r",
											"    pm.response.to.not.have.jsonBody();\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"role\": \"{{secondary_regular_role}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:3000/users/{{new-user-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"users",
										"{{new-user-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users/{id} - Get new user and check properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function() {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains a user object in JSON notation\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"User contains valid properties\", function() {\r",
											"    \r",
											"    var user = pm.response.json();\r",
											"\r",
											"    pm.expect(user).to.have.property('_id').that.is.not.null;\r",
											"    pm.expect(user).to.have.property('firstName').that.is.not.null;\r",
											"    pm.expect(user).to.have.property('lastName').that.is.not.null;\r",
											"    pm.expect(user).to.have.property('userName').that.is.not.null;\r",
											"    pm.expect(user).to.have.property('password').that.is.not.null;\r",
											"    pm.expect(user).to.not.have.property('googleID');\r",
											"    pm.expect(user).to.have.property('role').that.is.not.null;\r",
											"})\r",
											"\r",
											"pm.test(\"Check if new user is now a regular user\", function() {\r",
											"\r",
											"    var user = pm.response.json();\r",
											"\r",
											"    pm.expect(user.role).to.equal(pm.variables.get('secondary_regular_role'));\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api-host}}:3000/users/{{new-user-id-1}}",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"users",
										"{{new-user-id-1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Swap to regular user",
					"item": [
						{
							"name": "/authentication/logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function() {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/authentication/logout",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"authentication",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "/authentication/local Log in as regular user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Ok\", function() {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{secondary_user_username}}\",\r\n    \"password\": \"{{secondary_user_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:{{port}}/authentication/local",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"authentication",
										"local"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check all user routes as regular user (should be locked)",
					"item": [
						{
							"name": "/users - Get all users as regular user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Forbidden\", function() {\r",
											"\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains a user object in JSON notation\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api-host}}:3000/users",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users/{id} - Get new user and check properties as regular user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Forbidden\", function() {\r",
											"\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains a user object in JSON notation\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api-host}}:3000/users/{{new-user-id-1}}",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"users",
										"{{new-user-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users - Create new admin user as regular user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Forbidden\", function() {\r",
											"\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains a user object in JSON notation\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{secondary_user_first_name}}\",\r\n    \"lastName\": \"{{secondary_user_last_name}}\",\r\n    \"userName\": \"{{secondary_user_username}}\",\r\n    \"password\": \"{{secondary_user_password}}\",\r\n    \"role\": \"{{secondary_admin_role}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:{{port}}/users",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users{id} - Change new admin user to regular user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Forbidden\", function() {\r",
											"\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains a user object in JSON notation\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"role\": \"{{secondary_regular_role}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:3000/users/{{new-user-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"users",
										"{{new-user-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users{id} Delete as regular user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Forbidden\", function() {\r",
											"\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains a user object in JSON notation\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"role\": \"User\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:3000/users/{{new-user-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"users",
										"{{new-user-id-1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Artist and Artwork Regular User Flow",
					"item": [
						{
							"name": "/artists Add new artist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201){\r",
											"    \r",
											"    var artist = pm.response.json();\r",
											"    pm.environment.set(\"new-artist-id-1\", artist._id);\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is Created\", function (){\r",
											"    \r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"pm.test(\"Response body is not empty\", function(){\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"Response body contains an artist object in JSON notation\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body contains a new artist with the correct properties\", function(){\r",
											"\r",
											"    var artist = pm.response.json();\r",
											"\r",
											"    pm.expect(artist).to.have.property('_id').that.is.not.null;\r",
											"    pm.expect(artist).to.have.property('firstName').that.is.not.null;\r",
											"    pm.expect(artist).to.have.property('lastName').that.is.not.null;\r",
											"})\r",
											"\r",
											"pm.test(\"Test newly created artist's firt name\", function() {\r",
											"    \r",
											"    var artist = pm.response.json();\r",
											"\r",
											"    pm.expect(artist.firstName).to.equal(pm.variables.get('new-artist-first-name-1'));\r",
											"})\r",
											"\r",
											"pm.test(\"Test newly created artist's last name\", function() {\r",
											"    \r",
											"    var artist = pm.response.json();\r",
											"\r",
											"    pm.expect(artist.lastName).to.equal(pm.variables.get('new-artist-last-name-1'));\r",
											"})\r",
											"\r",
											"pm.test(\"Check if newly created resource URL to be in the location HTTP header\", function(){\r",
											"\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"\r",
											"    var artist = pm.response.json();\r",
											"\r",
											"    // What we get back will be a relative url and as such, can either compare the relative url or construct both to have the full urls\r",
											"    var locationUrl = 'http://' + pm.variables.get('api-host') + \":\" +  pm.variables.get('port') + pm.response.headers.get('Location')\r",
											"    var newResourceUrl = 'http://' + pm.variables.get('api-host') + \":\" +  pm.variables.get('port') + '/artists/' + artist._id;\r",
											"\r",
											"    pm.expect(locationUrl).to.eql(newResourceUrl);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{new-artist-first-name-1}}\",\r\n    \"lastName\": \"{{new-artist-last-name-1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:3000/artists",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"artists"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artists Get all artists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function() {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains an array of artists\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Each artist in the artists array contains valid properties\", function() {\r",
											"    \r",
											"    var artists = pm.response.json();\r",
											"\r",
											"    for (const artist of artists){\r",
											"        pm.expect(artist).to.have.property('_id').that.is.not.null;\r",
											"        pm.expect(artist).to.have.property('firstName').that.is.not.null;\r",
											"        pm.expect(artist).to.have.property('lastName').that.is.not.null;\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artists",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artists"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artists Update artist first name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is No Content\", function (){\r",
											"    \r",
											"    pm.response.to.have.status(204);\r",
											"})\r",
											"\r",
											"pm.test(\"Response body is empty\", function(){\r",
											"\r",
											"    pm.response.to.not.have.jsonBody();\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{new-artist-first-name-2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:3000/artists/{{new-artist-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"artists",
										"{{new-artist-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artists Check if incorrect returns not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Not Found\", function (){\r",
											"    \r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"pm.test(\"Response body is not empty\", function(){\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{new-artist-first-name-2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:3000/artists/6459cb6869034321bbacd0cd",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"artists",
										"6459cb6869034321bbacd0cd"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artists{id} Search for artist via id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function() {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains an artist object in JSON notation\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"Artist contains valid properties\", function() {\r",
											"    \r",
											"    var artist = pm.response.json();\r",
											"\r",
											"    pm.expect(artist).to.have.property('_id').that.is.not.null;\r",
											"    pm.expect(artist).to.have.property('firstName').that.is.not.null;\r",
											"    pm.expect(artist).to.have.property('lastName').that.is.not.null;\r",
											"})\r",
											"\r",
											"pm.test(\"Check if new artist's first name is correct\", function() {\r",
											"\r",
											"    var artist = pm.response.json();\r",
											"\r",
											"    pm.expect(artist.firstName).to.equal(pm.variables.get('new-artist-first-name-2'));\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artists/{{new-artist-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artists",
										"{{new-artist-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artists{id} Check if incorrect returns not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Not Found\", function (){\r",
											"    \r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"pm.test(\"Response body is not empty\", function(){\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artists/6459cb6869034321bbacd0cd",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artists",
										"6459cb6869034321bbacd0cd"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artists/search Search for artist via first name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function() {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains an array of artists\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Each artist in the artists array contains valid properties\", function() {\r",
											"    \r",
											"    var artists = pm.response.json();\r",
											"\r",
											"    for (const artist of artists){\r",
											"        pm.expect(artist).to.have.property('_id').that.is.not.null;\r",
											"        pm.expect(artist).to.have.property('firstName').that.is.not.null;\r",
											"        pm.expect(artist).to.have.property('lastName').that.is.not.null;\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artists/search/name_search?firstName={{new-artist-first-name-2}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artists",
										"search",
										"name_search"
									],
									"query": [
										{
											"key": "firstName",
											"value": "{{new-artist-first-name-2}}"
										},
										{
											"key": "lastName",
											"value": "{{new-artist-last-name-1}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/artists/search Search for artist via last name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function() {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains an array of artists\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Each artist in the artists array contains valid properties\", function() {\r",
											"    \r",
											"    var artists = pm.response.json();\r",
											"\r",
											"    for (const artist of artists){\r",
											"        pm.expect(artist).to.have.property('_id').that.is.not.null;\r",
											"        pm.expect(artist).to.have.property('firstName').that.is.not.null;\r",
											"        pm.expect(artist).to.have.property('lastName').that.is.not.null;\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artists/search/name_search?lastName={{new-artist-last-name-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artists",
										"search",
										"name_search"
									],
									"query": [
										{
											"key": "firstName",
											"value": "{{new-artist-first-name-2}}",
											"disabled": true
										},
										{
											"key": "lastName",
											"value": "{{new-artist-last-name-1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/artworks Add new artwork",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201){\r",
											"    \r",
											"    var artwork = pm.response.json();\r",
											"    pm.environment.set(\"new-artwork-id-1\", artwork._id);\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is Created\", function (){\r",
											"    \r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"pm.test(\"Response body is not empty\", function(){\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"Response body contains an artwork object in JSON notation\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"// It is also expected that a artwork path is created. This is something handled in code and not passed in.\r",
											"// The user will need to provide an image though.\r",
											"pm.test(\"Response body contains a new artwork with the correct properties\", function(){\r",
											"\r",
											"    var artwork = pm.response.json();\r",
											"\r",
											"    pm.expect(artwork).to.have.property('_id').that.is.not.null;\r",
											"    pm.expect(artwork).to.have.property('name').that.is.not.null;\r",
											"    pm.expect(artwork).to.have.property('artCreationDate').that.is.not.null;\r",
											"    pm.expect(artwork).to.have.property('artworkPath').that.is.not.null;\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"Check if newly created resource URL to be in the location HTTP header\", function(){\r",
											"\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"\r",
											"    var artwork = pm.response.json();\r",
											"\r",
											"    // What we get back will be a relative url and as such, can either compare the relative url or construct both to have the full urls\r",
											"    var locationUrl = 'http://' + pm.variables.get('api-host') + \":\" +  pm.variables.get('port') + pm.response.headers.get('Location')\r",
											"    var newResourceUrl = 'http://' + pm.variables.get('api-host') + \":\" +  pm.variables.get('port') + '/artworks/' + artwork._id;\r",
											"\r",
											"    pm.expect(locationUrl).to.eql(newResourceUrl);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{new-artwork-name}}",
											"type": "text"
										},
										{
											"key": "artCreationDate",
											"value": "{{new-artwork-creation_date}}",
											"type": "text"
										},
										{
											"key": "artistID",
											"value": "{{new-artist-id-1}}",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "simple_image.png"
										}
									]
								},
								"url": {
									"raw": "http://{{api-host}}:3000/artworks",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"artworks"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artworks Get all artworks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function() {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains an array of artworks.\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Artwork contains valid properties\", function() {\r",
											"    \r",
											"    var artworks = pm.response.json();\r",
											"\r",
											"    for (const artwork of artworks){\r",
											"        pm.expect(artwork).to.have.property('_id').that.is.not.null;\r",
											"        pm.expect(artwork).to.have.property('name').that.is.not.null;\r",
											"        pm.expect(artwork).to.have.property('artCreationDate').that.is.not.null;\r",
											"        pm.expect(artwork).to.have.property('artworkPath').that.is.not.null;\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artworks/",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artworks",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/artworks Find artwork by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function() {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains an artwork object in JSON notation\", function() {\r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"Artwork contains valid properties\", function() {\r",
											"    \r",
											"    var artwork = pm.response.json();\r",
											"\r",
											"    pm.expect(artwork).to.have.property('_id').that.is.not.null;\r",
											"    pm.expect(artwork).to.have.property('name').that.is.not.null;\r",
											"    pm.expect(artwork).to.have.property('artCreationDate').that.is.not.null;\r",
											"    pm.expect(artwork).to.have.property('artworkPath').that.is.not.null;\r",
											"})\r",
											"\r",
											"pm.test(\"Check if new artwork's name is correct\", function() {\r",
											"\r",
											"    var artwork = pm.response.json();\r",
											"\r",
											"    pm.expect(artwork.name).to.equal(pm.variables.get('new-artwork-name'));\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artworks/{{new-artwork-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artworks",
										"{{new-artwork-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artworks Get an artwork image resource by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function() {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response to contain an image resource\", function() {\r",
											"\r",
											"    pm.response.to.have.header(\"Content-Type\", \"image/png\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artworks/image/{{new-artwork-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artworks",
										"image",
										"{{new-artwork-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artworks Update an image and the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is No Content\", function() {\r",
											"\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{new-artwork-name-2}}",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "simple_image_2.png"
										}
									]
								},
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artworks/image/{{new-artwork-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artworks",
										"image",
										"{{new-artwork-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artworks Delete artwork",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is No Content\", function (){\r",
											"    \r",
											"    pm.response.to.have.status(204);\r",
											"})\r",
											"\r",
											"pm.test(\"Response body is not empty\", function(){\r",
											"\r",
											"    pm.response.to.be.not.null;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://{{api-host}}:3000/artworks/{{new-artwork-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"artworks",
										"{{new-artwork-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artworks Try delete artwork again to ensure it fails.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is No Content\", function (){\r",
											"    \r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"pm.test(\"Response body is not empty\", function(){\r",
											"\r",
											"    pm.response.to.be.not.null;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://{{api-host}}:3000/artworks/{{new-artwork-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"artworks",
										"{{new-artwork-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artists/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is No Content\", function (){\r",
											"    \r",
											"    pm.response.to.have.status(204);\r",
											"})\r",
											"\r",
											"pm.test(\"Response body is empty\", function(){\r",
											"\r",
											"    pm.response.to.not.have.jsonBody();\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artists/{{new-artist-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artists",
										"{{new-artist-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/artists/{id} Check if deleted artist can be found again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Not Found\", function (){\r",
											"    \r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"pm.test(\"Response body is not empty\", function(){\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/artists/{{new-artist-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"artists",
										"{{new-artist-id-1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Swap back to Admin user",
					"item": [
						{
							"name": "/authentication/logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function() {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/authentication/logout",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"authentication",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "/authentication/local Log in as admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Ok\", function() {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{primary_admin_username}}\",\r\n    \"password\": \"{{primary_admin_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:{{port}}/authentication/local",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"authentication",
										"local"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete new user",
					"item": [
						{
							"name": "/users{id} Not found if wrong ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Not Found\", function (){\r",
											"    \r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"pm.test(\"Response body is not empty\", function(){\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"role\": \"User\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:3000/users/6459cb6869034321bbacd0cd",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"users",
										"6459cb6869034321bbacd0cd"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is No Content\", function (){\r",
											"    \r",
											"    pm.response.to.have.status(204);\r",
											"})\r",
											"\r",
											"pm.test(\"Response body is  empty\", function(){\r",
											"\r",
											"    pm.response.to.have.not.jsonBody();\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"role\": \"User\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{api-host}}:3000/users/{{new-user-id-1}}",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"users",
										"{{new-user-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users/{id} - Check if user actually deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function() {\r",
											"\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function() {\r",
											"\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.null;\r",
											"    pm.response.to.not.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api-host}}:3000/users/{{new-user-id-1}}",
									"host": [
										"{{api-host}}"
									],
									"port": "3000",
									"path": [
										"users",
										"{{new-user-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/authentication/logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function() {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{api-host}}:{{port}}/authentication/logout",
									"protocol": "http",
									"host": [
										"{{api-host}}"
									],
									"port": "{{port}}",
									"path": [
										"authentication",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}